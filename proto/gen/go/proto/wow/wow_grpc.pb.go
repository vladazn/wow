// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WowClient is the client API for Wow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WowClient interface {
	GetChallenge(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChallengeResponse, error)
	GetWisdom(ctx context.Context, in *WisdomRequest, opts ...grpc.CallOption) (*WisdomResponse, error)
}

type wowClient struct {
	cc grpc.ClientConnInterface
}

func NewWowClient(cc grpc.ClientConnInterface) WowClient {
	return &wowClient{cc}
}

func (c *wowClient) GetChallenge(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, "/wow.Wow/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wowClient) GetWisdom(ctx context.Context, in *WisdomRequest, opts ...grpc.CallOption) (*WisdomResponse, error) {
	out := new(WisdomResponse)
	err := c.cc.Invoke(ctx, "/wow.Wow/GetWisdom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WowServer is the server API for Wow service.
// All implementations must embed UnimplementedWowServer
// for forward compatibility
type WowServer interface {
	GetChallenge(context.Context, *Empty) (*ChallengeResponse, error)
	GetWisdom(context.Context, *WisdomRequest) (*WisdomResponse, error)
	mustEmbedUnimplementedWowServer()
}

// UnimplementedWowServer must be embedded to have forward compatible implementations.
type UnimplementedWowServer struct {
}

func (UnimplementedWowServer) GetChallenge(context.Context, *Empty) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedWowServer) GetWisdom(context.Context, *WisdomRequest) (*WisdomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWisdom not implemented")
}
func (UnimplementedWowServer) mustEmbedUnimplementedWowServer() {}

// UnsafeWowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WowServer will
// result in compilation errors.
type UnsafeWowServer interface {
	mustEmbedUnimplementedWowServer()
}

func RegisterWowServer(s grpc.ServiceRegistrar, srv WowServer) {
	s.RegisterService(&Wow_ServiceDesc, srv)
}

func _Wow_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WowServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wow.Wow/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WowServer).GetChallenge(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wow_GetWisdom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WisdomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WowServer).GetWisdom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wow.Wow/GetWisdom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WowServer).GetWisdom(ctx, req.(*WisdomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wow_ServiceDesc is the grpc.ServiceDesc for Wow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wow.Wow",
	HandlerType: (*WowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _Wow_GetChallenge_Handler,
		},
		{
			MethodName: "GetWisdom",
			Handler:    _Wow_GetWisdom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wow/wow.proto",
}
